
// PEG Rules for parsing Markdown text

markdown	= block+

-block		= !\eos blankLine* (
				heading / 
				hr / 
				ul / 
				ol / 
			#	blockquote /
			#	image / 
				paragraph /
				\err(FAIL)
			)

hr			= ([_-*] anySpace){3,} endLine
paragraph	= inline (lineBreak inline)* endLine (blankLine / \eos)
heading		= level:"#"{1,6} !"#" anySpace trim "#"* endLine

ul			= (
				 space{0,3} ulBullet space+ text:[^\n]+ 
				(
					(lineBreak       space{0,5} !space !(ulBullet space+) text:[^\n]+)
				  / ("\n" blankLine+ space{2,4} !space                  nltext:[^\n]+)
				)*
			) endLine

ol			= (
				 space{0,3} olBullet space+ text:[^\n]+ 
				(
					(lineBreak       space{0,5} !space !(olBullet space+) text:[^\n]+)
				  / ("\n" blankLine+ space{2,4} !space                  nltext:[^\n]+)
				)*
			) endLine

-ulBullet	= [*+\-]
-olBullet	= [0-9]+ "." 

inline  	= (
			  bold
			/ italic
			#/ Image
			#/ Link
			/ code
			/ text
			/ text:[`*_#]+		// mop up un-matched special chars
			)+

bold		= ("**" !space text "**") / ("__" !space text "__")
italic		= ( "*" !space text "*" ) / ( "_" !space text "_" )
code		= "`" text "`"
#link		=  "[" (&[^\n] [^\]] )+ "]" "(" (&[^\n] [^)]  )+ ")" 
#image		= "![" (&[^\n] [^\]] )+ "]" "(" (&[^\n] [^)]  )+ ")" anySpace eol

lineBreak	= "\n" !blankLine
text		= [^\n`*_#]+
trim		= [^\n`*_#]+

-anySpace	= space*
-space		= [ \t]
-blankLine	= anySpace newLine
-endLine	= newLine / \eos
-newLine	= "\n"

echo1		= \noop(echo1)
echo2		= \noop(echo2)
